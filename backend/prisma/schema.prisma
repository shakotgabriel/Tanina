generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                @id @default(autoincrement())
  firstName            String             @db.VarChar(50)
  lastName             String             @db.VarChar(50)
  email                String             @unique @db.VarChar(255)
  phoneNumber          String?            @unique @db.VarChar(20)
  password             String
  role                 UserRole           @default(USER)
  verificationStatus   VerificationStatus @default(UNVERIFIED)
  tier                 UserTier           @default(BASIC)
  kycStatus            KYCStatus          @default(PENDING)
  kycRejectionReason   String?            @db.Text
  failedLoginAttempts  Int                @default(0)
  lockedUntil         DateTime?
  twoFactorEnabled    Boolean            @default(false)
  twoFactorSecret     String?
  referralCode        String?            @unique
  referredBy          Int?
  referrer            User?              @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals           User[]             @relation("UserReferrals")
  accounts             Account[]
  wallets              Wallet[]
  transactions         Transaction[]
  profile              Profile?
  auditLogs           AuditLog[]
  agent               Agent?
  admin               Admin?
  sessions            Session[]
  notifications       Notification[]
  verificationTokens  VerificationToken[]
  passwordResets      PasswordReset[]
  linkedAccounts      LinkedAccount[]
  transactionLimits   TransactionLimit[]
  merchant            Merchant?
  devices             Device[]
  beneficiaries       Beneficiary[]
  riskScore           RiskScore?
  lastActivity        UserActivity?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime?          @updatedAt
  deletedAt           DateTime?          // Soft delete support

  @@index([email])
  @@index([phoneNumber])
  @@index([referralCode])
  @@index([verificationStatus])
}

model UserActivity {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique
  user            User      @relation(fields: [userId], references: [id])
  lastLoginAt     DateTime?
  lastLoginIP     String?   @db.VarChar(45)
  lastPasswordChange DateTime?
  emailVerifiedAt DateTime?
  phoneVerifiedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
}

model Profile {
  id          Int        @id @default(autoincrement())
  userId      Int        @unique
  user        User       @relation(fields: [userId], references: [id])
  address     String?
  gender      Gender?    // Added gender field
  dateOfBirth DateTime?
  nationality String?
  idNumber    String?    @unique
  idType      IDType?
  selfieUrl   String?
  documentUrl String?
  auditLogs   AuditLog[] @relation("ProfileAudit")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
}

model Account {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  accountType   AccountType
  accountNumber String        @unique @db.VarChar(20)
  currency      CurrencyType
  status        AccountStatus @default(ACTIVE)
  isActive      Boolean       @default(true)
  wallets       Wallet[]
  transactions  Transaction[]
  auditLogs     AuditLog[]    @relation("AccountAudit")
  balance       Balance?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt

  @@index([accountNumber])
  @@index([userId])
  @@index([status])
}

model Balance {
  id            Int           @id @default(autoincrement())
  type          BalanceType
  accountId     Int?         @unique
  account       Account?     @relation(fields: [accountId], references: [id])
  walletId      Int?         @unique
  wallet        Wallet?      @relation(fields: [walletId], references: [id])
  available     Decimal      @default(0) @db.Decimal(20,2)
  pending       Decimal      @default(0) @db.Decimal(20,2)
  reserved      Decimal      @default(0) @db.Decimal(20,2)
  currency      CurrencyType
  lastUpdated   DateTime     @updatedAt
  createdAt     DateTime     @default(now())

  @@index([accountId])
  @@index([walletId])
  @@index([type])
}

model Wallet {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  accountId     Int
  account       Account       @relation(fields: [accountId], references: [id])
  currency      CurrencyType
  isActive      Boolean       @default(true)
  auditLogs     AuditLog[]    @relation("WalletAudit")
  debits        Debit[]
  credits       Credit[]
  transactions  Transaction[]
  balance       Balance?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt

  @@index([userId])
  @@index([accountId])
  @@index([isActive])
}

model Transaction {
  id              Int               @id @default(autoincrement())
  reference       String            @unique @db.VarChar(50)
  type            OperationType
  status          TransactionStatus @default(PENDING)
  description     String?           @db.Text
  amount          Decimal           @db.Decimal(20, 2)
  fee             Decimal           @default(0) @db.Decimal(20, 2)
  exchangeRate    Decimal?          @db.Decimal(10, 6)
  sourceCurrency  CurrencyType
  targetCurrency  CurrencyType
  userId          Int
  user            User             @relation(fields: [userId], references: [id])
  accountId       Int
  account         Account          @relation(fields: [accountId], references: [id])
  walletId        Int
  wallet          Wallet           @relation(fields: [walletId], references: [id])
  merchantId      Int?
  merchant        Merchant?        @relation(fields: [merchantId], references: [id])
  beneficiaryId   Int?
  beneficiary     Beneficiary?     @relation("BeneficiaryTransactions", fields: [beneficiaryId], references: [id])
  location        String?          // Transaction location
  ipAddress       String?          // IP address of transaction
  deviceId        String?          // Device used for transaction
  riskScore       Decimal?         @db.Decimal(5,2)
  debits          Debit[]
  credits         Credit[]
  commissions     Commission[]     @relation("TransactionCommission")
  metadata        Json?
  failureReason   String?          @db.Text
  auditLogs       AuditLog[]       @relation("TransactionAudit")
  agentId         Int?
  agent           Agent?           @relation(fields: [agentId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  completedAt     DateTime?

  @@index([reference])
  @@index([status])
  @@index([createdAt])
  @@index([userId])
  @@index([accountId])
  @@index([walletId])
  @@index([merchantId])
  @@index([beneficiaryId])
  @@index([agentId])
}

model Debit {
  id            Int         @id @default(autoincrement())
  amount        Decimal     @db.Decimal(20, 2)
  walletId      Int
  wallet        Wallet      @relation(fields: [walletId], references: [id])
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  description   String?     @db.Text
  status        TransactionStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt

  @@index([walletId])
  @@index([transactionId])
  @@index([status])
}

model Credit {
  id            Int         @id @default(autoincrement())
  amount        Decimal     @db.Decimal(20, 2)
  walletId      Int
  wallet        Wallet      @relation(fields: [walletId], references: [id])
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  description   String?     @db.Text
  status        TransactionStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt

  @@index([walletId])
  @@index([transactionId])
  @@index([status])
}

model Commission {
  id            Int         @id @default(autoincrement())
  agentId       Int
  agent         Agent       @relation(fields: [agentId], references: [id])
  amount        Decimal     @db.Decimal(20, 2)
  transactionId Int?
  transaction   Transaction? @relation("TransactionCommission", fields: [transactionId], references: [id])
  status        CommissionStatus @default(PENDING)
  description   String?     @db.Text
  createdAt     DateTime    @default(now())
  paidAt        DateTime?

  @@index([agentId])
  @@index([transactionId])
  @@index([status])
}

model Agent {
  id             Int           @id @default(autoincrement())
  userId         Int           @unique
  user           User          @relation(fields: [userId], references: [id])
  balance        Decimal       @default(0) @db.Decimal(20, 2)
  commissionRate Decimal       @default(0) @db.Decimal(5, 2)  // Added commission rate field
  isActive       Boolean       @default(true)
  transactions   Transaction[]
  commissions    Commission[]
  createdAt      DateTime      @default(now())
}

model Admin {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model AuditLog {
  id          Int          @id @default(autoincrement())
  userId      Int?
  user        User?        @relation(fields: [userId], references: [id])
  entityId    Int
  entityType  EntityType
  action      ActionType
  oldValue    Json?
  newValue    Json?
  ipAddress   String?
  userAgent   String?
  profile     Profile?     @relation("ProfileAudit", fields: [entityId], references: [id], map: "AuditLog_profile_fkey")
  account     Account?     @relation("AccountAudit", fields: [entityId], references: [id], map: "AuditLog_account_fkey")
  wallet      Wallet?      @relation("WalletAudit", fields: [entityId], references: [id], map: "AuditLog_wallet_fkey")
  transaction Transaction? @relation("TransactionAudit", fields: [entityId], references: [id], map: "AuditLog_transaction_fkey")
  createdAt   DateTime     @default(now())
}

model Session {
  id           Int       @id @default(autoincrement())
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  token        String    @unique
  deviceInfo   String?
  ipAddress    String?
  lastActivity DateTime  @default(now())
  expiresAt    DateTime
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@index([userId])
  @@index([token])
}

model VerificationToken {
  id            Int               @id @default(autoincrement())
  userId        Int
  user          User              @relation(fields: [userId], references: [id])
  token         String            @unique
  type          VerificationType
  status        TokenStatus       @default(PENDING)
  metadata      Json?             // Store additional verification data
  expiresAt     DateTime
  usedAt        DateTime?
  createdAt     DateTime          @default(now())

  @@index([token])
  @@index([userId])
  @@index([type])
}

model PasswordReset {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([token])
  @@index([userId])
}

model TransactionLimit {
  id           Int              @id @default(autoincrement())
  userId       Int
  user         User             @relation(fields: [userId], references: [id])
  limitType    LimitType
  timeFrame    LimitTimeFrame
  amount       Decimal          @db.Decimal(20, 2)
  currency     CurrencyType
  createdAt    DateTime         @default(now())
  updatedAt    DateTime?        @updatedAt

  @@index([userId])
}

model Notification {
  id          Int               @id @default(autoincrement())
  userId      Int
  user        User              @relation(fields: [userId], references: [id])
  type        NotificationType
  title       String
  message     String            @db.Text
  isRead      Boolean           @default(false)
  metadata    Json?
  createdAt   DateTime          @default(now())
  readAt      DateTime?

  @@index([userId])
  @@index([type])
}

model LinkedAccount {
  id              Int                @id @default(autoincrement())
  userId          Int
  user            User               @relation(fields: [userId], references: [id])
  provider        PaymentProvider
  accountNumber   String
  accountName     String?
  bankCode        String?            // For bank accounts
  bankBranch      String?            // For bank accounts
  routingNumber   String?            // For international transfers
  swiftCode       String?            // For international transfers
  isVerified      Boolean            @default(false)
  isActive        Boolean            @default(true)
  isPrimary       Boolean            @default(false)
  lastVerifiedAt  DateTime?
  verificationData Json?             // Store verification details
  metadata        Json?
  dailyLimit      Decimal?          @db.Decimal(20, 2)
  monthlyLimit    Decimal?          @db.Decimal(20, 2)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime?          @updatedAt

  @@unique([userId, provider, accountNumber])
  @@index([userId])
  @@index([provider])
}

model Device {
  id              Int       @id @default(autoincrement())
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  deviceId        String    @unique
  deviceType      String
  deviceName      String?
  lastIp          String?
  lastLocation    String?
  isTrusted       Boolean   @default(false)
  lastUsedAt      DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt

  @@index([userId])
  @@index([deviceId])
}

model RiskScore {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique
  user            User      @relation(fields: [userId], references: [id])
  score           Decimal   @db.Decimal(5,2)
  lastAssessedAt  DateTime
  factors         Json?     // Store risk factors
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
}

model Beneficiary {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  name          String
  accountNumber String
  bankCode      String?
  bankName      String?
  phoneNumber   String?
  email         String?
  relationship  String?
  isVerified    Boolean       @default(false)
  isActive      Boolean       @default(true)
  transactions  Transaction[] @relation("BeneficiaryTransactions")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt

  @@unique([userId, accountNumber])
  @@index([userId])
}

model Merchant {
  id              Int               @id @default(autoincrement())
  userId          Int               @unique
  user            User              @relation(fields: [userId], references: [id])
  businessName    String
  businessType    BusinessType
  registrationNo  String?           @unique
  website         String?
  supportEmail    String?
  supportPhone    String?
  callbackUrl     String?
  webhookSecret   String?
  isVerified      Boolean           @default(false)
  status          MerchantStatus    @default(PENDING)
  transactions    Transaction[]     // Merchant transactions
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt

  @@index([businessName])
  @@index([status])
}

enum EntityType {
  USER
  PROFILE
  ACCOUNT
  WALLET
  TRANSACTION
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
  STAFF
  AGENT
  MERCHANT
  SUPPORT
}

enum AccountType {
  PERSONAL
  BUSINESS
  WALLET
  SAVINGS
  MERCHANT
}

enum CurrencyType {
  USD
  KES
  SSP
  UGX
  RWF
}

enum OperationType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  BILL_PAYMENT
  MERCHANT_PAYMENT
  CASH_IN
  CASH_OUT
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REVERSED
  REFUNDED
  EXPIRED
}

enum IDType {
  NATIONAL_ID
  PASSPORT
  DRIVERS_LICENSE
}

enum KYCStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  CLOSED
  DORMANT
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum VerificationStatus {
  UNVERIFIED
  EMAIL_VERIFIED
  PHONE_VERIFIED
  FULLY_VERIFIED
  SUSPENDED
  BLOCKED
}

enum VerificationType {
  EMAIL
  PHONE
  TWO_FACTOR
  PASSWORD_RESET
  DEVICE
}

enum TokenStatus {
  PENDING
  USED
  EXPIRED
  REVOKED
}

enum UserTier {
  BASIC
  SILVER
  GOLD
  PLATINUM
  ENTERPRISE
}

enum LimitType {
  DAILY_TRANSACTION
  WEEKLY_TRANSACTION
  MONTHLY_TRANSACTION
  SINGLE_TRANSACTION
  DAILY_WITHDRAWAL
  MONTHLY_WITHDRAWAL
}

enum LimitTimeFrame {
  DAILY
  WEEKLY
  MONTHLY
  PER_TRANSACTION
}

enum NotificationType {
  TRANSACTION
  SECURITY
  PROMOTIONAL
  SYSTEM
  KYC_UPDATE
  ACCOUNT_UPDATE
  LOGIN_ALERT
  LIMIT_WARNING
  FRAUD_ALERT
}

enum PaymentProvider {
  MPESA
  MTN_MOMO
  MGURUSH
  BANK
}

enum BusinessType {
  RETAIL
  WHOLESALE
  SERVICES
  TECHNOLOGY
  OTHER
}

enum MerchantStatus {
  PENDING
  ACTIVE
  SUSPENDED
  TERMINATED
}

enum BalanceType {
  ACCOUNT_BALANCE
  WALLET_BALANCE
}

enum CommissionStatus {
  PENDING
  PAID
  CANCELLED
}
