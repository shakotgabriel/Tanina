generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int        @id @default(autoincrement())
  firstName          String     @db.VarChar(50)
  lastName           String     @db.VarChar(50)
  email              String     @unique @db.VarChar(255)
  phoneNumber        String?    @unique @db.VarChar(20)
  password           String
  role               UserRole   @default(USER)
  isVerified         Boolean    @default(false)
  kycStatus          KYCStatus  @default(PENDING)
  kycRejectionReason String?    @db.Text
  lastLoginAt        DateTime?
  lastLoginIP        String?    @db.VarChar(45)
  passwordChangedAt  DateTime?
  accounts           Account[]
  wallets            Wallet[]
  profile            Profile?
  auditLogs          AuditLog[]
  agent              Agent?
  admin              Admin?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime?  @updatedAt

  @@index([email])
  @@index([phoneNumber])
}

model Profile {
  id          Int        @id @default(autoincrement())
  userId      Int        @unique
  user        User       @relation(fields: [userId], references: [id])
  address     String?
  dateOfBirth DateTime?
  nationality String?
  idNumber    String?    @unique
  idType      IDType?
  selfieUrl   String?
  documentUrl String?
  auditLogs   AuditLog[] @relation("ProfileAudit")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
}

model Account {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  accountType   AccountType
  accountNumber String        @unique @db.VarChar(20)
  balance       Decimal       @default(0) @db.Decimal(20,2)
  currency      CurrencyType
  status        AccountStatus @default(ACTIVE)
  isActive      Boolean       @default(true)
  wallets       Wallet[]
  auditLogs     AuditLog[]    @relation("AccountAudit")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt

  @@index([accountNumber])
  @@index([userId])
}

model Wallet {
  id        Int          @id @default(autoincrement())
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  accountId Int
  account   Account      @relation(fields: [accountId], references: [id])
  balance   Decimal      @default(0) @db.Decimal(20, 2)
  currency  CurrencyType
  isActive  Boolean      @default(true)
  auditLogs AuditLog[]   @relation("WalletAudit")
  debits    Debit[]
  credits   Credit[]
  createdAt DateTime     @default(now())
  updatedAt DateTime?    @updatedAt

  @@index([userId])
  @@index([accountId])
}

model Transaction {
  id            Int               @id @default(autoincrement())
  reference     String            @unique @db.VarChar(50)
  type          OperationType
  status        TransactionStatus @default(PENDING)
  description   String?           @db.Text
  amount        Decimal           @db.Decimal(20, 2)
  fee           Decimal           @default(0) @db.Decimal(20, 2)
  debits        Debit[]
  credits       Credit[]
  metadata      Json?
  failureReason String?           @db.Text
  auditLogs     AuditLog[]        @relation("TransactionAudit")
  agent         Agent?            @relation(fields: [id], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime?         @updatedAt

  @@index([reference])
  @@index([status])
  @@index([createdAt])
}

model Debit {
  id            Int         @id @default(autoincrement())
  amount        Float
  walletId      Int
  wallet        Wallet      @relation(fields: [walletId], references: [id])
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
}

model Credit {
  id            Int         @id @default(autoincrement())
  amount        Float
  walletId      Int
  wallet        Wallet      @relation(fields: [walletId], references: [id])
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
}

model Commission {
  id        Int      @id @default(autoincrement())
  agentId   Int
  agent     Agent    @relation(fields: [agentId], references: [id])
  amount    Float
  createdAt DateTime @default(now())
}

model Agent {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  user         User          @relation(fields: [userId], references: [id])
  balance      Decimal       @default(0) @db.Decimal(20, 2)
  isActive     Boolean       @default(true)
  transactions Transaction[]
  commissions  Commission[]
  createdAt    DateTime      @default(now())
}

model Admin {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model AuditLog {
  id          Int          @id @default(autoincrement())
  userId      Int?
  user        User?        @relation(fields: [userId], references: [id])
  entityId    Int
  entityType  EntityType
  action      ActionType
  oldValue    Json?
  newValue    Json?
  ipAddress   String?
  userAgent   String?
  profile     Profile?     @relation("ProfileAudit", fields: [entityId], references: [id], map: "AuditLog_profile_fkey")
  account     Account?     @relation("AccountAudit", fields: [entityId], references: [id], map: "AuditLog_account_fkey")
  wallet      Wallet?      @relation("WalletAudit", fields: [entityId], references: [id], map: "AuditLog_wallet_fkey")
  transaction Transaction? @relation("TransactionAudit", fields: [entityId], references: [id], map: "AuditLog_transaction_fkey")
  createdAt   DateTime     @default(now())
}

enum EntityType {
  USER
  PROFILE
  ACCOUNT
  WALLET
  TRANSACTION
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
}

enum UserRole {
  ADMIN
  USER
  STAFF
  AGENT
  MERCHANT
}

enum AccountType {
  PERSONAL
  BUSINESS
  WALLET
  SAVINGS
  MERCHANT
}

enum CurrencyType {
  USD
  KES
  SSP
  UGX
  RWF
}

enum OperationType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  BILL_PAYMENT
  MERCHANT_PAYMENT
  CASH_IN
  CASH_OUT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum IDType {
  NATIONAL_ID
  PASSPORT
  DRIVERS_LICENSE
}

enum KYCStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  CLOSED
  DORMANT
}
